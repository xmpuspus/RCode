)
)
server <- function(input, output) {
who_df_sort <- who_df[order(who_df$Population, decreasing = TRUE),]
dataset <- reactive({
who_df[sample(nrow(who_df_sort), input$sampleSize),]
})
output$plot <- renderPlot({
p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()  + geom_bar(stat="identity", width=0.5, fill="navyblue") + theme(axis.text.x = element_text(angle=90, vjust=0.6))
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
if (input$jitter)
p <- p + geom_jitter()
if (input$smooth)
p <- p + geom_smooth()
print(p)
})
}
shinyApp(ui = ui, server = server)
dataset <- who_df
ui <- fluidPage(
title = "WHO Dataset Explorer",
plotOutput('plot'),
hr(),
fluidRow(
column(3,
h4("WHO Dataset Explorer"),
sliderInput('sampleSize', 'Sample Size',
min=1, max=nrow(dataset),
value=min(1000, nrow(dataset)),
step=5, round=0),
br(),
checkboxInput('jitter', 'Jitter'),
checkboxInput('smooth', 'Smooth')
),
column(4, offset = 1,
selectInput('x', 'X', names(dataset)),
selectInput('y', 'Y', names(dataset), names(dataset)[[2]]),
selectInput('color', 'Color', c('None', names(dataset)))
),
column(4,
selectInput('facet_row', 'Facet Row',
c(None='.', names(dataset[sapply(dataset, is.factor)]))),
selectInput('facet_col', 'Facet Column',
c(None='.', names(dataset[sapply(dataset, is.factor)])))
)
)
)
server <- function(input, output) {
who_df_sort <- who_df[order(who_df$Population, decreasing = TRUE),]
dataset <- reactive({
who_df[sample(nrow(who_df_sort), input$sampleSize),]
})
output$plot <- renderPlot({
p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()  + geom_bar(stat="identity", width=0.5, fill="navyblue") + theme(axis.text.x = element_text(angle=90, vjust=0.6))
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
if (input$jitter)
p <- p + geom_jitter()
if (input$smooth)
p <- p + geom_smooth()
print(p)
})
}
shinyApp(ui = ui, server = server)
demo(graphics)
who_df = read.csv('data/WHO.csv')
head(who_df)
# Get columns we need
who_df_lit = who_df[c('Country', 'LiteracyRate')]
# Remove NAs
who_df_lit_nona = who_df_lit[complete.cases(who_df_lit),]
# Get bottom 10
bottom_10_lit = tail(who_df_lit_nona[order(who_df_lit_nona$LiteracyRate, decreasing = TRUE),], 10)
# Get columns we need
who_df_lit = who_df[c('Country', 'LiteracyRate')]
# Remove NAs
who_df_lit_nona = who_df_lit[complete.cases(who_df_lit),]
# Get bottom 10
bottom_10_lit = tail(who_df_lit_nona[order(who_df_lit_nona$LiteracyRate, decreasing = TRUE),], 10)
bottom_10_lit
# Get columns we need
who_df_lit = who_df[c('Country', 'LiteracyRate')]
# Remove NAs
who_df_lit_nona = who_df_lit[complete.cases(who_df_lit),]
# Get bottom 10
bottom_10_lit = tail(who_df_lit_nona[order(who_df_lit_nona$LiteracyRate, decreasing = TRUE),], 10)
# Get Country with lowest literacy rate
bottom_10_lit[1]
# Get columns we need
who_df_lit = who_df[c('Country', 'LiteracyRate')]
# Remove NAs
who_df_lit_nona = who_df_lit[complete.cases(who_df_lit),]
# Get bottom 10
bottom_10_lit = tail(who_df_lit_nona[order(who_df_lit_nona$LiteracyRate, decreasing = TRUE),], 10)
# Get Country with lowest literacy rate
bottom_10_lit[,1]
# Get columns we need
who_df_lit = who_df[c('Country', 'LiteracyRate')]
# Remove NAs
who_df_lit_nona = who_df_lit[complete.cases(who_df_lit),]
# Get bottom 10
bottom_10_lit = tail(who_df_lit_nona[order(who_df_lit_nona$LiteracyRate, decreasing = TRUE),], 10)
# Get Country with lowest literacy rate
bottom_10_lit[1]
# Get columns we need
who_df_lit = who_df[c('Country', 'LiteracyRate')]
# Remove NAs
who_df_lit_nona = who_df_lit[complete.cases(who_df_lit),]
# Get bottom 10
bottom_10_lit = tail(who_df_lit_nona[order(who_df_lit_nona$LiteracyRate, decreasing = TRUE),], 10)
# Get Country with lowest literacy rate
bottom_10_lit[1,]
# Get columns we need
who_df_lit = who_df[c('Country', 'LiteracyRate')]
# Remove NAs
who_df_lit_nona = who_df_lit[complete.cases(who_df_lit),]
# Get bottom 10
bottom_10_lit = tail(who_df_lit_nona[order(who_df_lit_nona$LiteracyRate, decreasing = TRUE),], 10)
# Get Country with lowest literacy rate
bottom_10_lit[1,][1]
# Get columns we need
who_df_lit = who_df[c('Country', 'LiteracyRate')]
# Remove NAs
who_df_lit_nona = who_df_lit[complete.cases(who_df_lit),]
# Get bottom 10
bottom_10_lit = tail(who_df_lit_nona[order(who_df_lit_nona$LiteracyRate, decreasing = TRUE),], 10)
# Get Country with lowest literacy rate
bottom_10_lit[1,][1][1]
# Get columns we need
who_df_lit = who_df[c('Country', 'LiteracyRate')]
# Remove NAs
who_df_lit_nona = who_df_lit[complete.cases(who_df_lit),]
# Get bottom 10
bottom_10_lit = tail(who_df_lit_nona[order(who_df_lit_nona$LiteracyRate, decreasing = TRUE),], 10)
# Get Country with lowest literacy rate
bottom_10_lit[1,][1][1][1]
# Get columns we need
who_df_lit = who_df[c('Country', 'LiteracyRate')]
# Remove NAs
who_df_lit_nona = who_df_lit[complete.cases(who_df_lit),]
# Get bottom 10
bottom_10_lit = tail(who_df_lit_nona[order(who_df_lit_nona$LiteracyRate, decreasing = TRUE),], 10)
# Get Country with lowest literacy rate
bottom_10_lit[1,][1]
who_df_gni = who_df[which(who_df$Region == "Europe"),][c('Country', 'GNI')]
who_df_gni_nona = who_df_gni[complete.cases(who_df_gni),]
top_10_gni = head(who_df_gni_nona[order(who_df_gni_nona$GNI, decreasing = TRUE),], 10)
who_df_gni = who_df[which(who_df$Region == "Europe"),][c('Country', 'GNI')]
who_df_gni_nona = who_df_gni[complete.cases(who_df_gni),]
top_10_gni = head(who_df_gni_nona[order(who_df_gni_nona$GNI, decreasing = TRUE),], 10)
top_10_gni[1,1]
who_df_gni = who_df[which(who_df$Region == "Europe"),][c('Country', 'GNI')]
who_df_gni_nona = who_df_gni[complete.cases(who_df_gni),]
top_10_gni = head(who_df_gni_nona[order(who_df_gni_nona$GNI, decreasing = TRUE),], 10)
top_10_gni[1,][1]
who_df_le = who_df[which(who_df$Region == "Africa"),][c('Country', 'LifeExpectancy')]
who_df_le_nona = who_df_le[complete.cases(who_df_le),]
who_df_le_nona
who_df_le = who_df[which(who_df$Region == "Africa"),][c('Country', 'LifeExpectancy')]
who_df_le_nona = who_df_le[complete.cases(who_df_le),]
mean(who_df_le_nona$LifeExpectancy)
dim(who_df[which(who_df$Population > 10000),])[1]
who_df_le = who_df[which(who_df$Region == "Africa"),][c('Country', 'LifeExpectancy')]
mean(who_df_le_nona$LifeExpectancy, na.rm = TRUE)
who_df_cm = who_df[which(who_df$Region == "Americas"),][c('Country', 'ChildMortality')]
who_df_cm_nona = who_df_cm[complete.cases(who_df_cm),]
top_10_cm = head(who_df_cm_nona[order(who_df_cm_nona$ChildMortality, decreasing = TRUE),], 5)
top_10_cm
data = read_excel('data/Historical NBA Performance.xlsx')
library("readxl")
data = read_excel('data/Historical NBA Performance.xlsx')
library("readxl")
data = read_excel('data/Historical NBA Performance.xlsx')
head(data)
# Load Library
library("readxl")
# Read Data
data = read_excel('data/Historical NBA Performance.xlsx')
# Rename last column
names(data)[4]<-"win_pct"
head(data)
# Who are the teams with the highest winning percentage each year? (using highest win percentage of all time)
bulls_data = data[which(data$Team == 'Bulls'),]
bulls_data[which.max(bulls_data$win_pct),]['Year']
# Even Win-loss
# Create table that splits win loss
wl = do.call(cbind, c(data, read.table(text = data$Record, sep = "-", colClasses = "character")))
# Convert to DataFrame
wl = as.data.frame.matrix(wl)
# Convert last 2 columns to numeric
wl$V1 = as.numeric(as.character(wl$V1))
wl$V2 = as.numeric(as.character(wl$V2))
# Replace columns
names(wl)[5] = 'Win'
names(wl)[6] = 'Loss'
# Even Win-loss
# Create table that splits win loss
wl = do.call(cbind, c(data, read.table(text = data$Record, sep = "-", colClasses = "character")))
# Convert to DataFrame
wl = as.data.frame.matrix(wl)
# Convert last 2 columns to numeric
wl$V1 = as.numeric(as.character(wl$V1))
wl$V2 = as.numeric(as.character(wl$V2))
# Replace columns
names(wl)[5] = 'Win'
names(wl)[6] = 'Loss'
# Inspect data we've cleaned
head(wl)
equal_wl = wl[which(wl$Win == wl$Loss),]
equal_wl
equal_wl$Team
equal_wl$Team[1]
equal_wl$Team[1,]
equal_wl$Team[,1]
equal_wl$Team
unique(equal_wl$Team)
data = read.csv('data/seasons_stats.csv')
data = read.csv('data/seasons_stats.csv')
head(data)
data[c("Player", 'X3PAr')][which(data$X3PAr == max(data$X3PAr, na.rm = TRUE)),]
data[c("Player", 'FTr')][which(data$FTr == max(data$FTr, na.rm = TRUE)),]
data[c("Player", 'FTr')][which(data$FTr == max(data$FTr, na.rm = TRUE)),]
data[c("Player", 'X3PAr')][which(data$X3PAr == max(data$X3PAr, na.rm = TRUE)),]$Player
data[c("Player", 'FTr')][which(data$FTr == max(data$FTr, na.rm = TRUE)),]$Player
# Who are the players with the highest Score
df_agg_teams = do.call(rbind, lapply(split(data, as.factor(data$Player)), function(x) {return(x[which.max(x$PTS),])}))
df_agg_teams
df_agg_teams[which(df_agg_teams$Player == 'LeBron James'),]
df_agg_teams[which(df_agg_teams$Player == 'LeBron James'),]$Year
df_agg_teams[which(df_agg_teams$Player == 'Michael Jordan*'),]
df_agg_teams[which(df_agg_teams$Player == 'Michael Jordan*'),]$Year
kb_data = data[which(data$Player == 'Kobe Bryant'),]
kb_data[which.min(kb_data$MP),]$PER
data = read.csv('data/National Universities Rankings.csv')
data[which.max(data[['Undergrad.Enrollment']]),]$Name
head(data[order(data[['Rank']], decreasing = TRUE),], 10)
head(data[order(data[['Rank']], decreasing = FALSE),], 10)
# Get average tuition rates of to 10 univerisities
mean(as.numeric(gsub(",", "", sub('.', '', head(data[order(data[['Rank']], decreasing = FALSE),], 10)[['Tuition.and.fees']]))))
# Get columns we need
who_df_lit = who_df[c('Country', 'LiteracyRate')]
# Remove NAs
who_df_lit_nona = who_df_lit[complete.cases(who_df_lit),]
# Get bottom 10
bottom_10_lit = tail(who_df_lit_nona[order(who_df_lit_nona$LiteracyRate, decreasing = TRUE),], 10)
# Get Country with lowest literacy rate
bottom_10_lit[1,]
# Get columns we need
who_df_lit = who_df[c('Country', 'LiteracyRate')]
# Remove NAs
who_df_lit_nona = who_df_lit[complete.cases(who_df_lit),]
# Get bottom 10
bottom_10_lit = tail(who_df_lit_nona[order(who_df_lit_nona$LiteracyRate, decreasing = TRUE),], 10)
# Get Country with lowest literacy rate
bottom_10_lit
# Get columns we need
who_df_lit = who_df[c('Country', 'LiteracyRate')]
# Remove NAs
who_df_lit_nona = who_df_lit[complete.cases(who_df_lit),]
# Get bottom 10
bottom_10_lit = tail(who_df_lit_nona[order(who_df_lit_nona$LiteracyRate, decreasing = TRUE),], 10)
# Get Country with lowest literacy rate
bottom_10_lit[10]
# Get columns we need
who_df_lit = who_df[c('Country', 'LiteracyRate')]
# Remove NAs
who_df_lit_nona = who_df_lit[complete.cases(who_df_lit),]
# Get bottom 10
bottom_10_lit = tail(who_df_lit_nona[order(who_df_lit_nona$LiteracyRate, decreasing = TRUE),], 10)
# Get Country with lowest literacy rate
bottom_10_lit[,10]
# Get columns we need
who_df_lit = who_df[c('Country', 'LiteracyRate')]
# Remove NAs
who_df_lit_nona = who_df_lit[complete.cases(who_df_lit),]
# Get bottom 10
bottom_10_lit = tail(who_df_lit_nona[order(who_df_lit_nona$LiteracyRate, decreasing = TRUE),], 10)
# Get Country with lowest literacy rate
bottom_10_lit[10]
# Get columns we need
who_df_lit = who_df[c('Country', 'LiteracyRate')]
# Remove NAs
who_df_lit_nona = who_df_lit[complete.cases(who_df_lit),]
# Get bottom 10
bottom_10_lit = tail(who_df_lit_nona[order(who_df_lit_nona$LiteracyRate, decreasing = TRUE),], 10)
# Get Country with lowest literacy rate
bottom_10_lit[1]
# Get columns we need
who_df_lit = who_df[c('Country', 'LiteracyRate')]
# Remove NAs
who_df_lit_nona = who_df_lit[complete.cases(who_df_lit),]
# Get bottom 10
bottom_10_lit = tail(who_df_lit_nona[order(who_df_lit_nona$LiteracyRate, decreasing = TRUE),], 10)
# Get Country with lowest literacy rate
bottom_10_lit[1][10]
# Get columns we need
who_df_lit = who_df[c('Country', 'LiteracyRate')]
# Remove NAs
who_df_lit_nona = who_df_lit[complete.cases(who_df_lit),]
# Get bottom 10
bottom_10_lit = tail(who_df_lit_nona[order(who_df_lit_nona$LiteracyRate, decreasing = TRUE),], 10)
# Get Country with lowest literacy rate
bottom_10_lit[1,]
# Get columns we need
who_df_lit = who_df[c('Country', 'LiteracyRate')]
# Remove NAs
who_df_lit_nona = who_df_lit[complete.cases(who_df_lit),]
# Get bottom 10
bottom_10_lit = tail(who_df_lit_nona[order(who_df_lit_nona$LiteracyRate, decreasing = TRUE),], 10)
# Get Country with lowest literacy rate
bottom_10_lit[10,]
# Get columns we need
who_df_lit = who_df[c('Country', 'LiteracyRate')]
# Remove NAs
who_df_lit_nona = who_df_lit[complete.cases(who_df_lit),]
# Get bottom 10
bottom_10_lit = tail(who_df_lit_nona[order(who_df_lit_nona$LiteracyRate, decreasing = TRUE),], 10)
# Get Country with lowest literacy rate
bottom_10_lit[10,][1]
data = read.csv('data/seasons_stats.csv')
data$Year = as.numeric(data$Year)
head(data)
# Who are the players with the highest Scores each year?
df_agg_teams = do.call(rbind, lapply(split(data, as.factor(data$Player)), function(x) {return(x[which.max(x$PTS),])}))
df_agg_teams
# Who are the players with the highest Scores each year?
df_agg_teams = do.call(rbind, lapply(split(data, as.factor(data$Player)), function(x) {return(x[which.max(x$PTS),])}))
df_agg_teams[order(df_agg_teams$Year, Decreasing = FALSE),]
# Who are the players with the highest Scores each year?
df_agg_teams = do.call(rbind, lapply(split(data, as.factor(data$Player)), function(x) {return(x[which.max(x$PTS),])}))
df_agg_teams[order(df_agg_teams$Year, decreasing = FALSE),]
# Who are the players with the highest Scores each year?
df_agg_teams = do.call(rbind, lapply(split(data, as.factor(data$Year)), function(x) {return(x[which.max(x$PTS),])}))
df_agg_teams[order(df_agg_teams$Year, decreasing = FALSE),]
df_agg_teams[which(df_agg_teams$Player == 'LeBron James'),]
df_agg_teams[which(df_agg_teams$Player == 'Michael Jordan*'),]$Year
df_agg_teams[which(df_agg_teams$Player == 'LeBron James'),]
df_agg_teams[which(df_agg_teams$Player == 'LeBron James'),]$Year
data[which.max(data$Player == 'Lebron James'),]
data = read.csv('data/seasons_stats.csv')
data$Year = as.numeric(data$Year)
head(data)
data[c("Player", 'X3PAr')][which(data$X3PAr == max(data$X3PAr, na.rm = TRUE)),]
data[c("Player", 'X3PAr')][which(data$X3PAr == max(data$X3PAr, na.rm = TRUE)),]$Player
data[c("Player", 'FTr')][which(data$FTr == max(data$FTr, na.rm = TRUE)),]$Player
data[c("Player", 'FTr')][which(data$FTr == max(data$FTr, na.rm = TRUE)),]
# Who are the players with the highest Scores each year?
df_agg_teams = do.call(rbind, lapply(split(data, as.factor(data$Year)), function(x) {return(x[which.max(x$PTS),])}))
df_agg_teams[order(df_agg_teams$Year, decreasing = FALSE),]
df_agg_teams[which(df_agg_teams$Player == 'LeBron James'),]
df_agg_teams[which(df_agg_teams$Player == 'LeBron James'),]$Year
data[which.max(data$Player == 'Lebron James'),]
data[which(data$Player == 'Lebron James'),][which.max(data[which(data$Player == 'Lebron James'),]$PTS),]
data[which(data$Player == 'Lebron James'),]
data[which(data$Player == 'LeBron James'),][which.max(data[which(data$Player == 'LeBron James'),]$PTS),]
data[which(data$Player == 'Lebron James'),]
# Load Data
who_df = read.csv('data/WHO.csv')
head(who_df)
# Get columns we need
who_df_lit = who_df[c('Country', 'LiteracyRate')]
# Remove NAs
who_df_lit_nona = who_df_lit[complete.cases(who_df_lit),]
# Get bottom 10
bottom_10_lit = tail(who_df_lit_nona[order(who_df_lit_nona$LiteracyRate, decreasing = TRUE),], 10)
# Get Country with lowest literacy rate
bottom_10_lit[10,][1]
who_df_gni = who_df[which(who_df$Region == "Europe"),][c('Country', 'GNI')]
who_df_gni_nona = who_df_gni[complete.cases(who_df_gni),]
top_10_gni = head(who_df_gni_nona[order(who_df_gni_nona$GNI, decreasing = TRUE),], 10)
top_10_gni[1,][1]
who_df_le = who_df[which(who_df$Region == "Africa"),][c('Country', 'LifeExpectancy')]
mean(who_df_le_nona$LifeExpectancy, na.rm = TRUE)
dim(who_df[which(who_df$Population > 10000),])[1]
who_df_cm = who_df[which(who_df$Region == "Americas"),][c('Country', 'ChildMortality')]
who_df_cm_nona = who_df_cm[complete.cases(who_df_cm),]
top_10_cm = head(who_df_cm_nona[order(who_df_cm_nona$ChildMortality, decreasing = TRUE),], 5)
top_10_cm
# Load Library
library("readxl")
# Read Data
data = read_excel('data/Historical NBA Performance.xlsx')
# Rename last column
names(data)[4]<-"win_pct"
head(data)
# Who are the teams with the highest winning percentage each year? (using highest win percentage of all time)
bulls_data = data[which(data$Team == 'Bulls'),]
bulls_data[which.max(bulls_data$win_pct),]['Year']
# Even Win-loss
# Create table that splits win loss
wl = do.call(cbind, c(data, read.table(text = data$Record, sep = "-", colClasses = "character")))
# Convert to DataFrame
wl = as.data.frame.matrix(wl)
# Convert last 2 columns to numeric
wl$V1 = as.numeric(as.character(wl$V1))
wl$V2 = as.numeric(as.character(wl$V2))
# Replace columns
names(wl)[5] = 'Win'
names(wl)[6] = 'Loss'
# Inspect data we've cleaned
head(wl)
equal_wl = wl[which(wl$Win == wl$Loss),]
equal_wl
unique(equal_wl$Team)
data = read.csv('data/seasons_stats.csv')
data$Year = as.numeric(data$Year)
head(data)
data[c("Player", 'X3PAr')][which(data$X3PAr == max(data$X3PAr, na.rm = TRUE)),]
data[c("Player", 'X3PAr')][which(data$X3PAr == max(data$X3PAr, na.rm = TRUE)),]$Player
data[c("Player", 'FTr')][which(data$FTr == max(data$FTr, na.rm = TRUE)),]
data[c("Player", 'FTr')][which(data$FTr == max(data$FTr, na.rm = TRUE)),]$Player
# Who are the players with the highest Scores each year?
df_agg_teams = do.call(rbind, lapply(split(data, as.factor(data$Year)), function(x) {return(x[which.max(x$PTS),])}))
df_agg_teams[order(df_agg_teams$Year, decreasing = FALSE),]
df_agg_teams[which(df_agg_teams$Player == 'LeBron James'),]
df_agg_teams[which(df_agg_teams$Player == 'LeBron James'),]$Year
data[which(data$Player == 'LeBron James'),][which.max(data[which(data$Player == 'LeBron James'),]$PTS),]
data[which(data$Player == 'LeBron James'),][which.max(data[which(data$Player == 'LeBron James'),]$PTS),]$Year
df_agg_teams[which(df_agg_teams$Player == 'Michael Jordan*'),]
df_agg_teams[which(df_agg_teams$Player == 'Michael Jordan*'),]$Year
kb_data = data[which(data$Player == 'Kobe Bryant'),]
kb_data[which.min(kb_data$MP),]$PER
data[which(data$Player == 'Michael Jordan*'),][which.max(data[which(data$Player == 'Michael Jordan*'),]$PTS),]
data[which(data$Player == 'Michael Jordan*'),][which.max(data[which(data$Player == 'Michael Jordan*'),]$PTS),]$Year
who_df[which(who_df$Population > 10000),]
print('Number of Countries with population greater than 10,000', dim(who_df[which(who_df$Population > 10000),])[1])
print(['Number of Countries with population greater than 10,000', dim(who_df[which(who_df$Population > 10000),])[1]])
print(c('Number of Countries with population greater than 10,000', dim(who_df[which(who_df$Population > 10000),])[1])
print(c('Number of Countries with population greater than 10,000', dim(who_df[which(who_df$Population > 10000),])[1]))
dim(who_df[which(who_df$Population > 10000),])[1]
# Players with highest 3-point attempt rate in a season per year?
df_agg_X3PAr = do.call(rbind, lapply(split(data, as.factor(data$Year)), function(x) {return(x[which.max(x$X3PAr),])}))
df_agg_teams[order(df_agg_teams$Year, decreasing = FALSE),]
df_agg_X3PAr[c("Player", 'X3PAr')][which(df_agg_X3PAr$X3PAr == max(data$X3PAr, na.rm = TRUE)),]$Player
df_agg_X3PAr[c("Player", 'X3PAr')][which(df_agg_X3PAr$X3PAr == max(data$X3PAr, na.rm = TRUE)),]
# Players with highest 3-point attempt rate in a season per year?
df_agg_X3PAr = do.call(rbind, lapply(split(data, as.factor(data$Year)), function(x) {return(x[which.max(x$X3PAr),])}))
df_agg_X3PAr[order(df_agg_X3PAr$Year, decreasing = FALSE),]
# Players with highest 3-point attempt rate in a season per year?
df_agg_X3FTr = do.call(rbind, lapply(split(data, as.factor(data$Year)), function(x) {return(x[which.max(x$FTr),])}))
df_agg_X3FTr[order(df_agg_X3FTr$Year, decreasing = FALSE),]
data[c("Player", 'X3PAr')][which(df_agg_X3FTr == max(df_agg_X3FTr, na.rm = TRUE)),]$Player
data[c("Player", 'X3FTr')][which(df_agg_X3FTr == max(df_agg_X3FTr, na.rm = TRUE)),]$Player
# Players with highest 3-point attempt rate in a season per year?
df_agg_FTr = do.call(rbind, lapply(split(data, as.factor(data$Year)), function(x) {return(x[which.max(x$FTr),])}))
df_agg_FTr[order(df_agg_FTr$Year, decreasing = FALSE),]
data[c("Player", 'FTr')][which(df_agg_FTr == max(df_agg_FTr, na.rm = TRUE)),]$Player
data[c("Player", 'FTr')][which(df_agg_FTr$FTr == max(df_agg_FTr$FTr, na.rm = TRUE)),]$Player
data[c("Player", 'FTr')][which(df_agg_FTr$FTr == max(df_agg_FTr$FTr, na.rm = TRUE)),]
# Players with highest 3-point attempt rate in a season per year?
df_agg_FTr = do.call(rbind, lapply(split(data, as.factor(data$Year)), function(x) {return(x[which.max(x$FTr),])}))
df_agg_FTr[order(df_agg_FTr$Year, decreasing = FALSE),][c('Year', 'Player', 'FTr')]
df_agg_FTr[c("Player", 'FTr')][which(df_agg_FTr$FTr == max(df_agg_FTr$FTr, na.rm = TRUE)),]
data[c("Player", 'FTr')][which(data$FTr == max(data$FTr, na.rm = TRUE)),]$Player
df_agg_FTr[c("Player", 'FTr')][which(data$FTr == max(data$FTr, na.rm = TRUE)),]$Player
df_agg_FTr[c("Player", 'FTr')][which(data$FTr == max(data$FTr, na.rm = TRUE)),]
df_agg_FTr[c("Player", 'FTr')][which(df_agg_FTr$FTr == max(df_agg_FTr$FTr, na.rm = TRUE)),]$Player
data[c("Player", 'FTr')][which(data$FTr == max(data$FTr, na.rm = TRUE)),]$Player
data[c("Player", 'FTr')][which(data$FTr == max(data$FTr, na.rm = TRUE)),]
# Players with highest 3-point attempt rate in a season per year?
df_agg_FTr = do.call(rbind, lapply(split(data, as.factor(data$Year)), function(x) {return(x[which.max(x$FTr),])}))
df_agg_FTr[order(df_agg_FTr$Year, decreasing = FALSE),][c('Year', 'Player', 'FTr')]
unique(data$Year)
# Players with highest 3-point attempt rate in a season per year?
df_agg_X3PAr = do.call(rbind, lapply(split(data, as.factor(data$Year)), function(x) {return(x[which.max(x$X3PAr),])}))
df_agg_X3PAr[order(df_agg_X3PAr$Year, decreasing = FALSE),][c('Year', 'Player', 'X3PAr')]
top_10 = head(data[order(data[['Rank']], decreasing = FALSE),], 10)
selectInput("top_10", "", c("Tuition.and.fees", "Undergrad.Enrollment"))
renderPlot({
d <-get(input$top_10)
plot(d)
})
# Get average tuition rates of to 10 univerisities
mean(as.numeric(gsub(",", "", sub('.', '', head(data[order(data[['Rank']], decreasing = FALSE),], 10)[['Tuition.and.fees']]))))
top_10 = head(data[order(data[['Rank']], decreasing = FALSE),], 10)
selectInput("top_10", "", c("Tuition.and.fees", "Undergrad.Enrollment"))
renderPlot({
d <-get(input$top_10)
plot(d)
})
data = read.csv('data/National Universities Rankings.csv')
data = read.csv('data/National Universities Rankings.csv')
data = read.csv('data/National Universities Rankings.csv')
pwd
pwd()
getwd()
# Load Data
who_df = read.csv('data/WHO.csv')
head(who_df)
# Load Data
who_df = read.csv('data/WHO.csv')
head(who_df)
# Get columns we need
who_df_lit = who_df[c('Country', 'LiteracyRate')]
# Remove NAs
who_df_lit_nona = who_df_lit[complete.cases(who_df_lit),]
# Get bottom 10
bottom_10_lit = tail(who_df_lit_nona[order(who_df_lit_nona$LiteracyRate, decreasing = TRUE),], 10)
# Get Country with lowest literacy rate
bottom_10_lit[10,][1]
getwd()
setwd("/Users/xmpuspus/Documents/notebooks/RShiny/")
# Load Data
who_df = read.csv('data/WHO.csv')
head(who_df)
